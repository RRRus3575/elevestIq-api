generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String  @id @default(uuid())
  email       String  @unique
  password    String
  name        String?
  role        Role
  isOnboarded Boolean @default(false)
  isVerified  Boolean @default(false)

  tokenVersion Int         @default(0)
  tokens       UserToken[]
  sessions     Session[]

  startupProfile  StartupProfile?
  investorProfile InvestorProfile?

  messages         Message[]   @relation("Sender")
  agreements       Agreement[]
  signatures       Signature[]
  receivedMessages Message[]   @relation("Receiver")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  STARTUP
  INVESTOR
}

model Session {
  id          String    @id @default(uuid())
  userId      String
  userAgent   String?
  ip          String?
  createdAt   DateTime  @default(now())
  expiresAt   DateTime
  revokedAt   DateTime?
  refreshHash String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
}

model UserToken {
  id        String    @id @default(uuid())
  userId    String
  tokenHash String    @unique
  type      TokenType
  meta      Json?
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime  @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
  @@index([expiresAt])
}

enum TokenType {
  password_reset
  email_verify
  email_change
  login_verify
}

model StartupProfile {
  id          String   @id @default(uuid())
  userId      String   @unique
  companyName String?
  description String?
  goals       String?
  tags        String[] // Напр.: ["AI", "SaaS"]
  industry    String?
  stage       String?
  location    String?

  user User @relation(fields: [userId], references: [id])
}

model InvestorProfile {
  id          String   @id @default(uuid())
  userId      String   @unique
  companyName String?
  description String?
  interests   String?
  tags        String[]
  region      String?
  budgetMin   Int?
  budgetMax   Int?

  user User @relation(fields: [userId], references: [id])
}

model AgreementTemplate {
  id          String  @id @default(uuid())
  name        String
  description String?
  content     String // Markdown або HTML шаблон

  createdAt DateTime @default(now())

  agreements Agreement[]
}

model Agreement {
  id         String          @id @default(uuid())
  userId     String
  templateId String
  filledData Json
  status     AgreementStatus

  pdfUrl String?

  user       User              @relation(fields: [userId], references: [id])
  template   AgreementTemplate @relation(fields: [templateId], references: [id])
  signatures Signature[]

  createdAt DateTime @default(now())
}

enum AgreementStatus {
  DRAFT
  SENT
  SIGNED
  REJECTED
}

model Signature {
  id                String          @id @default(uuid())
  userId            String
  agreementId       String
  signedAt          DateTime        @default(now())
  signatureHash     String?
  signedDocumentUrl String?
  signatureLog      SignatureLog?
  isVerified        Boolean         @default(false)
  method            SignatureMethod @default(CLICK)

  user      User      @relation(fields: [userId], references: [id])
  agreement Agreement @relation(fields: [agreementId], references: [id])
}

enum SignatureMethod {
  CLICK
  DRAW
  BANK_ID
  DOCUMENT_UPLOAD
}

model Message {
  id         String      @id @default(uuid())
  senderId   String
  receiverId String
  content    String
  timestamp  DateTime    @default(now())
  type       MessageType @default(TEXT)
  isRead     Boolean     @default(false)

  sender   User @relation("Sender", fields: [senderId], references: [id])
  receiver User @relation("Receiver", fields: [receiverId], references: [id])
}

enum MessageType {
  TEXT
  IMAGE
  FILE
  LINK
  VIDEO
}

model SignatureLog {
  id          String   @id @default(uuid())
  signatureId String   @unique
  timestamp   DateTime @default(now())
  action      String
  ipAddress   String?
  userAgent   String?

  signature Signature @relation(fields: [signatureId], references: [id])
}
